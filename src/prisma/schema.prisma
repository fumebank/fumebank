generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE")
}

// Site

model Designer {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  lines      Line[]
  fragrances Fragrance[]
}

model Line {
  id    Int    @id @default(autoincrement())
  name  String
  slug  String @unique
  cover String

  designer   Designer @relation(fields: [designerId], references: [id])
  designerId Int

  fragrances Fragrance[]
}

model Fragrance {
  id   Int    @id @default(autoincrement())
  name String
  slug String

  designer   Designer @relation(fields: [designerId], references: [id])
  designerId Int

  line   Line @relation(fields: [lineId], references: [id])
  lineId Int

  wantedBy User[] @relation("Want")
  ownedBy  User[] @relation("Have")
}

// Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  wants Fragrance[] @relation("Want")
  owns  Fragrance[] @relation("Have")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
